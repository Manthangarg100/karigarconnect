"use client";

import { useState, useRef, useEffect } from 'react';
import { Mic, Loader2, Sparkles, StopCircle } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { BackButton } from '@/components/back-button';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { createProductFromCommandAction } from '@/app/actions';
import Image from 'next/image';

// Check for SpeechRecognition API
const SpeechRecognition =
  (typeof window !== 'undefined' && (window.SpeechRecognition || window.webkitSpeechRecognition));

export default function VoiceStorefrontPage() {
  const [isRecording, setIsRecording] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [generatedProduct, setGeneratedProduct] = useState<{ name: string; description: string; imageUrl: string; } | null>(null);
  const recognitionRef = useRef<any>(null);
  const { toast } = useToast();

  useEffect(() => {
    if (!SpeechRecognition) {
      toast({
        variant: 'destructive',
        title: 'Browser Not Supported',
        description: 'Speech recognition is not supported in this browser. Please try Chrome or Safari.',
      });
      return;
    }

    const recognition = new SpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'en-US';

    recognition.onresult = (event: any) => {
      let interimTranscript = '';
      let finalTranscript = '';
      for (let i = event.resultIndex; i < event.results.length; ++i) {
        if (event.results[i].isFinal) {
          finalTranscript += event.results[i][0].transcript;
        } else {
          interimTranscript += event.results[i][0].transcript;
        }
      }
      setTranscript(finalTranscript + interimTranscript);
    };
    
    recognition.onerror = (event: any) => {
        console.error('Speech recognition error', event.error);
        toast({
            variant: 'destructive',
            title: 'Recognition Error',
            description: `An error occurred: ${event.error}. Please ensure you've granted microphone permissions.`
        });
        setIsRecording(false);
    }

    recognitionRef.current = recognition;
  }, [toast]);

  const toggleRecording = () => {
    if (isRecording) {
      recognitionRef.current?.stop();
      setIsRecording(false);
    } else {
      setTranscript('');
      setGeneratedProduct(null);
      recognitionRef.current?.start();
      setIsRecording(true);
    }
  };

  const handleCreateProduct = async () => {
    if (!transcript) {
      toast({
        variant: 'destructive',
        title: 'No command given',
        description: 'Please record a command describing the product first.',
      });
      return;
    }
    setIsLoading(true);
    setGeneratedProduct(null);

    const result = await createProductFromCommandAction({ command: transcript });
    
    setIsLoading(false);

    if (result.success && result.data) {
        setGeneratedProduct(result.data);
        toast({
            title: 'Product Created!',
            description: 'Your product has been generated by AI.',
        });
    } else {
        toast({
            variant: 'destructive',
            title: 'Creation Failed',
            description: result.error || "The AI failed to create the product. Please try a more descriptive command."
        });
    }
  };

  return (
    <div className="p-6 h-full">
      <BackButton />
      <Card className="w-full max-w-4xl mx-auto mt-4">
        <CardHeader className="text-center">
          <CardTitle className="font-headline text-3xl flex items-center justify-center gap-2">
            <Mic className="w-8 h-8 text-primary" />
            Voice-to-Storefront
          </CardTitle>
          <CardDescription>
            Describe your product, and let AI create a listing for you. Try saying: <br />
            <span className="italic text-primary">"Create a product called 'Sunset Shawl'. It's a handwoven pashmina with orange and purple colors, perfect for evening wear."</span>
          </CardDescription>
        </CardHeader>
        <CardContent className="flex flex-col items-center gap-6">
          <div className="flex items-center gap-4">
            <Button onClick={toggleRecording} size="lg" className="w-48">
              {isRecording ? <StopCircle className="mr-2" /> : <Mic className="mr-2" />}
              {isRecording ? 'Stop Recording' : 'Start Recording'}
            </Button>
            <Button onClick={handleCreateProduct} disabled={isLoading || isRecording || !transcript} size="lg" className="w-48">
              {isLoading ? <Loader2 className="mr-2 animate-spin" /> : <Sparkles className="mr-2" />}
              Create Product
            </Button>
          </div>
          
          <Card className="w-full bg-secondary/30">
            <CardHeader>
              <CardTitle className="text-lg">Your Voice Command</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground min-h-[40px]">
                {transcript || (isRecording ? 'Listening...' : 'Press "Start Recording" and speak.')}
              </p>
            </CardContent>
          </Card>
            
          {isLoading && (
            <div className="flex flex-col items-center justify-center text-muted-foreground gap-2 p-8">
              <Loader2 className="h-12 w-12 animate-spin text-primary" />
              <p>AI is creating your product...</p>
            </div>
          )}

          {generatedProduct && (
            <div className="grid md:grid-cols-2 gap-6 w-full pt-6">
                <div className="space-y-4">
                    <h2 className="text-2xl font-headline">Generated Product</h2>
                    <Card>
                        <CardHeader>
                            <CardTitle>{generatedProduct.name}</CardTitle>
                        </CardHeader>
                        <CardContent>
                            <p>{generatedProduct.description}</p>
                        </CardContent>
                    </Card>
                </div>
                <div className="space-y-4">
                    <h2 className="text-2xl font-headline">Generated Image</h2>
                    <Card className="aspect-square">
                        <CardContent className="p-2 h-full flex items-center justify-center">
                            <Image src={generatedProduct.imageUrl} alt={generatedProduct.name} width={500} height={500} className="rounded-md object-contain max-h-full" />
                        </CardContent>
                    </Card>
                </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
